<?php

/**
 * @file
 * Install, update and uninstall functions for the markdown module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\markdown\Plugin\Markdown\ParserInterface;
use Drupal\markdown\PluginManager\ParserManager;

/**
 * Implements hook_requirements().
 *
 * {@inheritdoc}
 *
 * Note: this is currently being ignored in Drush >=9 <=9.7.2.
 *
 * @see https://github.com/drush-ops/drush/pull/4337
 * @noinspection PhpInappropriateInheritDocUsageInspection
 * @noinspection PhpUnused
 */
function markdown_requirements($phase) {
  $requirements = [];

  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');

  // Load the Markdown Parser Plugin Manager service, if it exists.
  if (\Drupal::hasService('plugin.manager.markdown.parser')) {
    $parserManager = \Drupal::service('plugin.manager.markdown.parser');
  }
  // Otherwise, in the event that markdown isn't yet installed, register this
  // module's path in the autoloader and container namespaces. This will allow
  // the service to be manually constructed to discover installed parsers.
  else {
    $src = __DIR__ . '/src';
    /** @var \Composer\Autoload\ClassLoader $classLoader */
    $classLoader = \Drupal::service('class_loader');
    $classLoader->addPsr4('Drupal\\markdown\\', [$src]);

    /** @var \ArrayObject $containerNamespaces */
    $containerNamespaces = \Drupal::service('container.namespaces');
    if (!$containerNamespaces->offsetExists('Drupal\\markdown')) {
      $containerNamespaces->offsetSet('Drupal\\markdown', str_replace(\Drupal::root() . '/', '', $src));
    }

    $parserManager = ParserManager::create();
  }

  // Reset parser plugin cache.
  $parserManager->clearCachedDefinitions();

  // Retrieve all available parsers.
  $parsers = $parserManager->all();

  // Retrieve all installed parsers.
  $installed = $parserManager->installed();

  // Install.
  if ($phase === 'install') {
    if (!$installed) {
      $items = array_map(function (ParserInterface $parser) {
        $definition = $parser->getPluginDefinition();
        if (!empty($definition['versionExceptions'])) {
          $reason = implode(' ', $definition['versionExceptions']);
        }
        else {
          $reason = t('Not Installed');
        }
        $url = $parser->getUrl();
        return new FormattableMarkup($url ? '@id - @reason (@url)' : '@id - @reason', [
          '@id' => $parser->getPluginId(),
          '@reason' => $reason,
          '@url' => $url ? $url->toString() : NULL,
        ]);
      }, $parsers);
      if (php_sapi_name() === 'cli') {
        $items = new FormattableMarkup("\n  - @items", [
          '@items' => implode("\n  - ", $items),
        ]);
      }
      else {
        $list = [
          '#theme' => 'item_list__markdown_parsers',
          '#items' => $items,
        ];
        $items = $renderer->renderPlain($list);
      }
      $requirements['markdown'] = [
        'description' => t("Markdown cannot be installed because there are no parsers currently installed. Please install at least one parser via Composer to enable this module:\n@parsers", [
          '@parsers' => $items,
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  // Runtime.
  elseif ($phase === 'runtime') {
    $build = [
      '#theme' => 'table__markdown_parser_requirements',
      '#header' => [
        t('Supported Parsers'),
        t('Installed Version'),
      ],
      '#rows' => [],
    ];
    foreach ($parsers as $name => $parser) {
      $row = [];
      if ($url = $parser->getUrl()) {
        $row[] = Link::fromTextAndUrl($parser->getLabel(FALSE), $url);
      }
      else {
        $row[] = $parser->getLabel(FALSE);
      }
      $row[] = $parser->getVersion();
      $build['#rows'][] = [
        'class' => $parser->isInstalled() ? 'color-success' : 'color-warning',
        'data' => $row,
      ];
    }

    $requirements['markdown'] = [
      'title' => Markup::create('Markdown<a id="markdown"></a>'),
      'severity' => REQUIREMENT_OK,
      'value' => ($count = count($installed)) === 1 ? t('1 parser installed') : t('@count parsers installed', [
        '@count' => $count,
      ]),
    ];

    if (!$installed) {
      $requirements['markdown']['severity'] = REQUIREMENT_ERROR;
      $requirements['markdown']['value'] .= '. ' . t('You must install at least one parser via Composer for the Markdown module to function properly.');
    }

    $requirements['markdown']['description'] = $renderer->renderPlain($build);
  }

  return $requirements;
}
